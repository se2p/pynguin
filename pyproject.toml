# SPDX-FileCopyrightText: 2019â€“2025 Pynguin Contributors
#
# SPDX-License-Identifier: MIT

[tool.poetry]
name = "pynguin"
version = "0.44.0.dev"
description = "Pynguin is a tool for automated unit test generation for Python"
authors = [
  "Stephan Lukasczyk <stephan@pynguin.eu>",
  "Lukas Krodinger <lukas.krodinger@gmail.com>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/se2p/pynguin"
documentation = "https://pynguin.readthedocs.io"
homepage = "https://www.pynguin.eu"
keywords = [
  "unit test",
  "random testing",
  "search based",
  "test generation"
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Education :: Testing",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Testing :: Unit",
  "Typing :: Typed",
]
packages = [
  { include = "pynguin", from = "src" }
]
include = [
  { path = "tests", format = "sdist" }
]

[tool.poetry.dependencies]
python = ">=3.10, <3.15"
astroid = "^4.0.1"
black = "^25.1.0"
bytecode = "0.17.0"
dill = "^0.4.0"
Jinja2 = "^3.1.6"
networkx = "^3.4.2"
multiprocess = "^0.70.18"
rich = "^14.0.0"
Pygments = "^2.19.2"
pytest = "^8.3.5"
simple-parsing = "^0.1.7"
typing_inspect = "^0.9.0"
asciitree = "^0.3.3"
libcst = "^1.7.0"
setuptools = "^80.9.0"
toml = "^0.10.2"
psutil = "^7.1.1"
rstr = "^3.2.2"

[tool.poetry.group.dev.dependencies]
isort = { extras = ["pyproject"], version = "^6.0.1" }
mypy = "^1.15.0"
pre-commit = "^4.2.0"
ruff = "^0.11"
types-toml = "^0.10.8.20240310"
types-pyyaml = "^6.0.12.20250516"
types-networkx = "^3.4"

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1.3"
sphinx-autodoc-typehints = "^3.0"
sphinx-hoverxref = "^1.4.2"
sphinx-rtd-theme = "^3.0.2"

[tool.poetry.group.test.dependencies]
coverage = "^7.8.0"
hypothesis = "^6.131"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"
pytest-picked = "^0.5.1"
pytest-sugar = "^1.0.0"

[tool.poetry.group.openai]
optional = true

[tool.poetry.group.openai.dependencies]
openai = "^1.72.0"

[tool.poetry.group.numpy]
optional = true

[tool.poetry.group.numpy.dependencies]
numpy = "^1.26.4"

[tool.poetry.scripts]
pynguin = "pynguin.cli:main"

[tool.coverage.run]
branch = true
source = ["src/pynguin", "tests"]
omit = ["tests/fixtures/*"]
relative_files = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]

[tool.coverage.html]
directory = "cov_html"

[tool.isort]
py_version = 310
profile = "black"
force_single_line = true
combine_as_imports = true
lines_between_types = 1
lines_after_imports = 2
src_paths = ["src", "tests"]

[tool.mypy]
files = "src"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
enable_error_code = [
  "ignore-without-code",
  "truthy-bool",
]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = [
  "tests",
]
# A lot of our own classes start with Test so pytest will pick them up during test collection.
# But they don't actually contains tests, so we set an empty matcher for the class name.
python_classes = ''

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Assume Python 3.10.
target-version = "py310"
line-length = 100
preview = true
src = ["src", "tests"]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "docs",
  "node_modules",
  "venv",
  "tests/fixtures/*.py",
  "tests/fixtures/*.pyi",
]

[tool.ruff.lint]
select = [
  "A", # flake8-builtins
  "ARG", # flake8-unused-arguments
  "B", # bugbear
  "BLE", # flake8-blind-except
  "CPY", # flake8-copyright
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "D", # pydocstyle
  "DTZ", # flake8-datetimez
  "E", # pycodestyle
  "ERA", # flake8-eradicate
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FBT", # flake8-boolean-trap
  "FIX", # flake8-fixme
  "FLY", # flynt
  "FURB", # refurb
  "G", # flake8-logging-format
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # flake8-naming
  "NPY", # numpy
  "PERF", # perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # ruff
  "S", # flake8-bandig
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "T20", # flake8-print
  "UP", # pyupgrade
  "W", # pycodestyle
]
ignore = [
  "ARG002", # unused method argument
  "B019", # functools.lru_cache might cause memory leaks
  "CPY001", # missing copyright notice at top of file
  "D105", # missing docstrings in magic methods
  "FIX002", # valid TODO comments
  "ISC001", # conflicts with ruff-format
  "PLR0911", # do not complain about too many return statements
  "PLR0912", # do not complain about too many branches
  "PLR0913", # do not complain about too many arguments to function call
  "PLR2004", # magic values in comparisons
  "PLR6301", # method could be a function, class method, or static method
  "RUF003", # comment contains ambiguous en dash
  "RUF009", # do not perform function call in dataclass defaults
  "S101", # do not complain about using assert statements
]
# Allow unused variables when underscore-prefixed:
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "PT006", # Wrong name(s) type in `@pytest.mark.parameterize`, expected `tuple`
  "S101", # Use of `assert` detected
  "SLF001", # Private member accessed
]

[tool.tox]
requires = ["tox~=4.28"]
env_list = ["3.10", "3.11", "3.12", "3.13", "3.14"]

[tool.tox.env_run_base]
skip_install = true
allowlist_externals = ["make", "poetry"]
commands_pre = [
  ["poetry", "env", "use", "{env_name}"],
  ["poetry", "install", "--with", "openai,numpy"],
]
commands = [
  ["make", "check"],
]
