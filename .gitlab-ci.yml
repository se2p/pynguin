# SPDX-FileCopyrightText: 2019â€“2025 Pynguin Contributors
#
# SPDX-License-Identifier: MIT

image: python:${PYTHON_VERSION}

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID         # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'main'  # Execute jobs when a new commit is pushed to main branch

cache:
  key: virtualenv
  paths:
    - .venv/
    - .cache/pip
    - .cache/pypoetry

stages:
  - build
  - lint
  - test
  - security
  - deploy

include:
  - template: Jobs/Secret-Detection.gitlab-ci.yml

secret_detection:
  before_script: []

variables:
  # secret detection only runs for branch pipelines by default but we run jobs
  # in merge request context
  AST_ENABLE_MR_PIPELINES: "true"

before_script:
  - python --version
  - pip install poetry
  - poetry config virtualenvs.in-project true
  - poetry install --with openai,numpy

.unit-tests: &unit-tests
  stage: test
  script:
    - >
      poetry run pytest -q --cov=pynguin --cov=tests --cov-branch
      --cov-report=term-missing
      --junitxml=report.xml tests/
    - mv .coverage ".coverage.${PYTHON_VERSION}"
  artifacts:
    reports:
      junit: report.xml
    paths:
      - .coverage.*
  needs: ["pre-commit", "reuse"]

unit-tests:
  <<: *unit-tests
  parallel:
    matrix:
      - PYTHON_VERSION: "3.10-bookworm"
      - PYTHON_VERSION: "3.11-bookworm"
      - PYTHON_VERSION: "3.12-bookworm"
      - PYTHON_VERSION: "3.13-bookworm"

combine-coverage:
  stage: test
  image: python:3.10-bookworm
  needs:
    - job: unit-tests
      artifacts: true
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    - pip install coverage
    - ls -la .coverage.*
    - coverage combine .coverage.*
    - coverage report
    - coverage xml -o merged-coverage.xml
    - coverage html -d cov_html
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: merged-coverage.xml
    paths:
      - cov_html

.nightly-tests: &nightly-tests
  only:
    - schedules
  stage: test
  before_script:
    - python --version
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install --with openai,numpy
    - poetry add --group dev pytest-random-order
  script: |
    for ((i=1; i<=10; i++)); do
      SECONDS=0
      echo "test run ${i}\n"
      poetry run pytest -q --cov=pynguin --cov=tests --cov-branch \
        --random-order --random-order-bucket=global \
        --cov-report=term-missing
      mv .coverage ".coverage.${PYTHON_VERSION}.${i}"
      elapsed=$SECONDS
      echo "=== required ${elapsed} seconds for run ${i} ===\n\n"
    done
  artifacts:
    paths:
      - .coverage.*
  needs: ["unit-tests"]

nightly-tests:
  <<: *nightly-tests
  parallel:
    matrix:
      - PYTHON_VERSION: "3.10-bookworm"
      - PYTHON_VERSION: "3.11-bookworm"
      - PYTHON_VERSION: "3.12-bookworm"
      - PYTHON_VERSION: "3.13-bookworm"

combine-nightly-coverage:
  only:
    - schedules
  stage: test
  image: python:3.10-bookworm
  needs:
    - job: nightly-tests
      artifacts: true
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    - pip install coverage
    - ls -la .coverage.*
    - coverage combine .coverage.*
    - coverage report
    - coverage xml -o merged-nightly-coverage.xml
    - coverage html -d cov_html_nightly
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: merged-nightly-coverage.xml
    paths:
      - cov_html_nightly

memory-profile:
  only:
    - schedules
  stage: lint
  image: python:3.10-bookworm
  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install --with openai,numpy
    - poetry add --group dev memray pytest-memray
  script:
    - poetry run pytest --memray tests/
  needs: ["pre-commit", "reuse"]

pre-commit:
  stage: lint
  image: python:3.10-bookworm
  script:
    - poetry run pre-commit run --all-files
  needs: []

mypy:
  stage: lint
  image: python:3.10-bookworm
  script:
    - poetry run mypy --version
    - poetry run mypy
  needs: ["pre-commit"]

sphinx:
  stage: build
  image: python:3.10-bookworm
  script:
    - poetry run sphinx-build -W docs docs/_build
  artifacts:
    expire_in: 1 week
    paths:
      - docs/_build

# Deploy the documentation to GitLab Pages
pages:
  stage: deploy
  image: python:3.10-bookworm
  script:
    - poetry install
    - poetry run sphinx-build -W docs public
  artifacts:
    paths:
      - public
  only:
    - main

# check license declarations etc.
reuse:
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  before_script:
    - python --version
  script:
    - reuse lint
  needs: []
